# ============================================================
snippet cat "string concat"
	+
# ============================================================
snippet for "for loop"
	for(var ${1:i} = 0; $1 < ${2:count}; ++$1) {
		$3
	}$0
# ============================================================
snippet settimeout "setTimeout"
	setTimeout(function() {
		$2
	}, ${1:1000});$0
# ============================================================
snippet setinterval "setInterval"
	setInterval(function() {
		$2
	}, ${1:1000});$0
# ============================================================
snippet profile "profile performance test"
	var _beginTime = Date.now();
	$2
	console.log('${1:cost time: }' + (Date.now() - _beginTime));$0
# ============================================================
snippet umd "UMD module template"
	(function(root, depNames, moduleName, factory, impl) {
		impl(root, depNames, moduleName, factory);
	}(this, [ // depNames$2
	], '${1:YourModuleName}', function(deps) {
		return $0{
			myFunc: function(aa) {
				console.log(aa);
			},
		};
	}, function(root, depNames, moduleName, factory) {
		if (typeof exports === 'object' && typeof module !== 'undefined') {
			var deps = {};
			for (var i = 0; i < depNames.length; ++i) {
				deps[depNames[i]] = require(depNames[i]);
			}
			module.exports = factory(deps);
		} else if (typeof define === 'function' && define.amd) {
			define(depNames, function() {
				var deps = {};
				for (var i = 0; i < arguments.length; ++i) {
					deps[depNames[i]] = arguments[i];
				}
				factory(deps);
			});
		} else {
			root = root || self;
			var deps = {};
			for (var i = 0; i < depNames.length; ++i) {
				deps[depNames[i]] = root[depNames[i]];
			}
			var apis = factory(deps);
			root.returnExports = {};
			root.returnExports[moduleName] = apis;
			root[moduleName] = apis;
		}
	}))
# ============================================================
