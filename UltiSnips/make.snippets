priority -10

# ============================================================
snippet template "file template" bm

#============================================================
# Usage:
#   make                same as make release
#   make debug          make a debug version
#   make release        make a release version
#   make run            make a debug version and run
#   make clean          clean every output files
#============================================================


#============================================================
# general project structure
#============================================================
# app(default) / shared / static
TARGET_TYPE     := ${1:app}
# sources directories, can be one or more
SRCDIRS         := ${2:src}
# output directory
OUTDIR          := ${3:build}
OBJDIR          := \$(OUTDIR)/obj
TARGET_HEADER   := \$(OUTDIR)/include
TARGET          := ${4:\$(OUTDIR)/${5:a.out}}
${6}
#============================================================
# flags for different builds
#============================================================
BASE_FLAGS      := -Wall
BASE_LFLAGS     :=
DEBUG_FLAGS     := -g
DEBUG_LFLAGS    :=
RELEASE_FLAGS   := -O2
RELEASE_LFLAGS  :=

#============================================================
# other
#============================================================
# cross-compiler
CROSS_COMPILE   :=
CC              := gcc
CXX             := g++
AR              := ar rcs



#============================================================
# no need to change these
#============================================================
SRCEXTS     := c C cc cpp CPP c++ cxx
HEADEREXTS  := h H hh hpp HPP h++ hxx
RM          := rm -rf
MKDIR       := mkdir -p

ifeq (\$(TARGET_TYPE),shared)
_IS_LIB:=1
else ifeq (\$(TARGET_TYPE),static)
_IS_LIB:=1
else
_IS_LIB:=0
endif

# tricks to solve special path
# _M_PFX:
#     with the tricks:
#         abc/xyz  => \$(OUTDIR)/_abc/xyz  => abc/xyz
#         /abc/xyz => \$(OUTDIR)/_/abc/xyz => /abc/xyz
#     without the tricks:
#         abc/xyz  => \$(OUTDIR)/abc/xyz  => abc/xyz
#         /abc/xyz => \$(OUTDIR)//abc/xyz => abc/xyz (ERROR)
# _M_DOT:
#     with the tricks:
#         ./abc  => \$(OUTDIR)/!DOT!/abc  => ./abc
#         ../abc => \$(OUTDIR)/!DOT!!DOT!/abc => ../abc
#     without the tricks:
#         ./abc  => \$(OUTDIR)/abc  => ./abc
#         ../abc => \$(OUTDIR_PARENT)/abc => (unable to convert) (ERROR)
_M_PFX:=_
_M_DOT:=!DOT!

# files and directories
ALL_SRC_DIRS:=\$(strip \$(shell find "\$(SRCDIRS)" -type d))
ALL_SRC_FILES:=\$(strip \$(foreach srcdir,\$(ALL_SRC_DIRS),\$(foreach srcext,\$(SRCEXTS),\$(wildcard \$(srcdir)/*.\$(srcext)))))
ALL_OBJ_FILES:=\$(strip \$(foreach srcfile,\$(ALL_SRC_FILES),\$(abspath \$(OBJDIR)/\$(_M_PFX)\$(subst .,\$(_M_DOT),\$(dir \$(srcfile)))/\$(addsuffix .o,\$(basename \$(notdir \$(srcfile)))))))
ALL_DEPEND_FILES:=\$(strip \$(foreach srcfile,\$(ALL_SRC_FILES),\$(abspath \$(OBJDIR)/\$(_M_PFX)\$(subst .,\$(_M_DOT),\$(dir \$(srcfile)))/\$(addsuffix .d,\$(basename \$(notdir \$(srcfile)))))))
MAIN_DEPEND_FILE:=\$(OUTDIR)/.depend
ALL_HEADER_FILES:=\$(strip \$(foreach srcdir,\$(ALL_SRC_DIRS),\$(foreach headerext,\$(HEADEREXTS),\$(wildcard \$(srcdir)/*.\$(headerext)))))
ALL_CODE_FILES:=\$(ALL_SRC_FILES) \$(ALL_HEADER_FILES)
ALL_SRC_EXCEPT_C:=\$(filter-out %.c %.C,\$(ALL_SRC_FILES))

# compiler
ifeq (\$(ALL_SRC_EXCEPT_C),)     # C program
	CXX_FIXED:=\$(CROSS_COMPILE)\$(CC)
else                            # C++ program
	CXX_FIXED:=\$(CROSS_COMPILE)\$(CXX)
endif

ifeq (\$(MAKECMDGOALS),debug)
CXXFLAGS:=\$(BASE_FLAGS) \$(DEBUG_FLAGS)
CXXLFLAGS:=\$(BASE_LFLAGS) \$(DEBUG_LFLAGS)
else
CXXFLAGS:=\$(BASE_FLAGS) \$(RELEASE_FLAGS)
CXXLFLAGS:=\$(BASE_LFLAGS) \$(RELEASE_LFLAGS)
endif

#============================================================
.PHONY: all debug release run clean prebuild postbuild

all: release

# Make a debug version
debug: \$(MAIN_DEPEND_FILE) \$(ALL_DEPEND_FILES) prebuild \$(TARGET) postbuild

# Make a release version
release: \$(MAIN_DEPEND_FILE) \$(ALL_DEPEND_FILES) prebuild \$(TARGET) postbuild

# Make and run
run: debug
	@echo ==================== \$(TARGET) ====================
	"./\$(TARGET)"
	@echo -------------------- \$(TARGET) --------------------

# Make everything go away (be clean)
clean:
	@\$(RM) "\$(OUTDIR)"
	@\$(RM) "\$(OBJDIR)"

#============================================================
# actual code dependencies section
\$(TARGET): \$(ALL_OBJ_FILES)
	@echo building \$(TARGET)
	@\$(MKDIR) "\$(dir \$(TARGET))"
ifeq (\$(TARGET_TYPE),shared)
	@\$(CXX_FIXED) \$(CXXFLAGS) \$(CXXLFLAGS) \$+ -o "\$(notdir \$@)" --shared
	@mv "\$(notdir \$@)" "\$@"
else ifeq (\$(TARGET_TYPE),static)
	@\$(AR) "\$@" \$+
else
	@\$(CXX_FIXED) \$(CXXFLAGS) \$(CXXLFLAGS) \$+ -o "\$@"
endif

\$(MAIN_DEPEND_FILE):\$(ALL_CODE_FILES)
	@\$(RM) "\$(MAIN_DEPEND_FILE)"
	@echo updating main depend file \$(MAIN_DEPEND_FILE)
	@echo \$(foreach srcfile,\$(ALL_SRC_FILES),"\n"\$(abspath \$(OBJDIR)/\$(_M_PFX)\$(subst .,\$(_M_DOT),\$(dir \$(srcfile)))/\$(addsuffix .d,\$(basename \$(notdir \$(srcfile))))):\$(srcfile)) >> \$(MAIN_DEPEND_FILE)

ifneq (\$(MAKECMDGOALS),clean)
-include \$(MAIN_DEPEND_FILE)
-include \$(ALL_DEPEND_FILES)
endif

%.d:
	@\$(RM) "\$@"
	@\$(MKDIR) "\$(dir \$@)"
	@echo updating \$(notdir \$@)
	@\$(CXX_FIXED) \$(CXXFLAGS) -MM \$(filter \$(foreach srcext,\$(SRCEXTS),%.\$(srcext)),\$(shell find "\$(basename \$(subst \$(_M_DOT),.,\$(subst \$(abspath \$(OBJDIR))/\$(_M_PFX),,\$(abspath \$@))))".* -type f)) -MT "\$(abspath \$(addsuffix .o,\$(basename \$@)))" -MF "\$(abspath \$@)"

%.o:
	@echo building \$(notdir \$@)
	@\$(CXX_FIXED) \$(CXXFLAGS) -c "\$(filter \$(foreach srcext,\$(SRCEXTS),%.\$(srcext)),\$(shell find "\$(basename \$(subst \$(_M_DOT),.,\$(subst \$(abspath \$(OBJDIR))/\$(_M_PFX),,\$(abspath \$@))))".* -type f))" -o "\$(abspath \$@)"

prebuild:
	@\$(MKDIR) "\$(OUTDIR)"
	@\$(MKDIR) "\$(OBJDIR)"

postbuild: \$(TARGET)
postbuild:
ifeq (\$(_IS_LIB),1)
	\$(if \$(foreach srcdir,\$(SRCDIRS),\$(foreach headerfile,\$(foreach headerext,\$(HEADEREXTS),\$(shell find "\$(srcdir)" -type f -name "*.\$(headerext)")),\$(shell mkdir -p "\$(TARGET_HEADER)/\$(dir \$(subst \$(abspath \$(srcdir))/,,\$(abspath \$(headerfile))))" && cp "\$(headerfile)" "\$(TARGET_HEADER)/\$(subst \$(abspath \$(srcdir))/,,\$(abspath \$(headerfile)))"))),)
endif
	@echo build finished

endsnippet

